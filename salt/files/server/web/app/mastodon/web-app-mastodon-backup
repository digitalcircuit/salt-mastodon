#!/bin/bash
# See http://redsymbol.net/articles/unofficial-bash-strict-mode/
set -euo pipefail

_LOCAL_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
# Get directory of this file

#-------------------------------------------------------------
if [ -z "${MODULE_ARCHIVE_UTIL_SCRIPT_LOADED:-}" ]; then
	# Up one directory from here
	source "$_LOCAL_DIR/../util-archive-script.sh"
fi
#-------------------------------------------------------------
# Check if session environment is prepared
if [ -z "${MODULE_ARCHIVE_UTIL_SCRIPT_LOADED:-}" ]; then
	# Quit as nothing can happen
	echo "Archive script utility module not loaded, does the file 'util-archive-script.sh' exist? (will now exit)" >&2
	exit 1
fi
#-------------------------------------------------------------

MASTODON_DB_NAME="{{ mastodon_db_name }}"

# Name of archive (e.g. "service")
AMOD_BACKUP_NAME="web-app-mastodon-backup"
# Primary: name of main data to archive (e.g. "configuration")
AMOD_BACKUP_PRIMARY_NAME="configuration"
# Primary: description of main data to archive (e.g. "User configuration")
AMOD_BACKUP_PRIMARY_DESCRIPTION="Mastodon web app build"
# Primary: source of main data on filesystem
AMOD_BACKUP_PRIMARY_SOURCE="$ARCHIVE_SYSTEM_ROOT_PREFIX/{{ masto_repo_dir }}"

# Calculated in util-archive-script
# Root directory of all archives
AMOD_ARCHIVE_PATH_ROOT=""
# Directory for archive storage
AMOD_ARCHIVE_DIR=""
# Primary stored archive filename, no extension
AMOD_BACKUP_PRIMARY_FILENAME=""

# Determine paths
EXPECTED_ARGS=1
if [ $# -ge $EXPECTED_ARGS ]; then
	ARCHIVE_CMD="$1"

	# Determine and process commands
	case "$ARCHIVE_CMD" in
		"backup" )
			# Check arguments
			EXPECTED_ARGS_ARCHIVE=2
			if [ $# -ne $EXPECTED_ARGS_ARCHIVE ]; then
				echo "Usage: `basename $0` backup {path to backup archive working directory}" >&2
				exit 1
			fi
			AMOD_ARCHIVE_PATH_ROOT="$2"
			archive_script_check_paths || return 1

			# Database
			MASTODON_DB_FILENAME="$AMOD_ARCHIVE_DIR/$MASTODON_DB_NAME-database"

			# 1. Stop services (if needed)
			# 2. Backup
			# Backup PostgreSQL database
			echo "[$(date --rfc-3339=seconds)] [web-app-mastodon] Backing up database..."
			if ! archive_backup_psql_db "$MASTODON_DB_FILENAME" "$MASTODON_DB_NAME"; then
				echo "Error: unable to backup" >&2
				exit 1
			fi

			# 3. Restore services (if needed)

			echo "[$(date --rfc-3339=seconds)] [web-app-mastodon] Backup done"
			;;
		"check" )
			# Make sure everything needed to backup and restore is in place
			# No dependencies
			exit 0
			;;
		"restore" )
			# Check arguments
			EXPECTED_ARGS_ARCHIVE=2
			if [ $# -ne $EXPECTED_ARGS_ARCHIVE ]; then
				echo "Usage: `basename $0` restore {path to backup archive working directory}" >&2
				exit 1
			fi
			AMOD_ARCHIVE_PATH_ROOT="$2"
			archive_script_check_paths || return 1

			# Database
			MASTODON_DB_FILENAME="$AMOD_ARCHIVE_DIR/$MASTODON_DB_NAME-database"

			# 1. Stop services
			SERVICES_NEED_START=false
			if systemctl is-active --quiet mastodon-web mastodon-sidekiq mastodon-streaming; then
				SERVICES_NEED_START=true
				systemctl stop mastodon-web mastodon-sidekiq mastodon-streaming
			fi

			# 2. Restore
			# Restore PostgreSQL database
			echo "[$(date --rfc-3339=seconds)] [web-app-mastodon] Restoring database..."
			if ! archive_restore_psql_db "$MASTODON_DB_FILENAME" "$MASTODON_DB_NAME"; then
				echo "Error: unable to restore" >&2
				exit 1
			fi

			# 3. Restart services
			if [[ "$SERVICES_NEED_START" == "true" ]]; then
				systemctl start mastodon-web mastodon-sidekiq mastodon-streaming
			fi

			echo "[$(date --rfc-3339=seconds)] [web-app-mastodon] Restore done"

			echo "[$(date --rfc-3339=seconds)] [web-app-mastodon] NOTE: Mastodon deployment is not fully automated yet.  Please follow the deployment guide in 'mastodon.sls' if Mastodon has not been set up."
			;;
		* )
			archive_script_print_usage
			exit 1
			;;
	esac
else
	archive_script_print_usage
	exit 1
fi
